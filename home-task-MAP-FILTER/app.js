// для решения задач используйте эти переменные!!!!!
let a1_res = [],
  a2_res = [],
  a3_res = [],
  a4_res = [],
  a5_res = [],
  a6_res = [],
  a7_res = [],
  a8_res = [],
  a11_res = [],
  a15_res = [];

// нужно ли очищать данные переменные при запуске функции? Да, но именно очищать.

// Task 1 ============================================
/* Дан массив a1 = [4, 5, 6, 7, 12, 34, 56, 78, 90, 11] - с помощью map переберите массив и создайте новый массив a1_res куда добавьте элементы данного массива умноженные на 2. Возвратите массив  a1_res. */

let a1 = [4, 5, 6, 7, 12, 34, 56, 78, 90, 11];

function t1() {
  a1_res = a1.map((elem) => elem * 2);
  document.querySelector('.out-1').textContent = a1_res;
  }
document.querySelector('.b-1').onclick = t1;

// Task 2 ============================================
/*  Дан массив a2= [2,3,4,5,10,11,12] - с помощью map переберите массив и создайте массив a2_res куда добавьте элементы данного массива возведенные во вторую степень. Возвратите массив a2_res. Действия должны запускаться при вызове функции t2.*/

let a2 = [2, 3, 4, 5, 10, 11, 12];

function t2() {
  let newArr_2 = a2.map((el) => {
    a2_res.push(el ** 2);
    return a2_res;
  })
  document.querySelector('.out-2').textContent += a2_res;
}
document.querySelector('.b-2').onclick = t2;

// Task 3 ============================================
/*  Дан массив a3 = [4,"3",6,7,"12",34,"56",78,90,11] - с помощью map переберите массив и создайте массив a3_res куда добавьте все элементы преобразованные к числу. Возвратите a3_res.
Действия должны запускаться при вызове функции t3. */

let a3 = [4, "3", 6, 7, "12", 34, "56", 78, 90, 11];

function t3() {
  let a3_res = a3.map((el) => +el);
  console.log(a3_res);
}
document.querySelector('.b-3').onclick = t3;
// Task 4 ============================================
/*  Функция t4 должна с помощью filter отфильтровать массив t4 и создать новый массив a4_res, куда добавить только числа из массива t4.  Функция должна возвращать a4_res. */

let a4 = [4, "3", 6, 7, "12", 34, "56", 78, 90, 11];

function t4() {
  let newArr_4 = a4.filter((el) => {
    if(typeof el == 'number'){
      a4_res.push(el);
      return a4_res;
    }
  })
  console.log(a4_res);
}
document.querySelector('.b-4').onclick = t4;

// Task 5 ============================================
/*  Дан массив a5 = [3, 14, 15, 92]. C помощью filter переберите массив и создайте a5_res, который содержит только четные числа из a5. Возвратите a5_res. Действия должны запускаться при вызове функции t5. Проверьте, чтобы функция корректно работала со строками, т.е. '6' не должно попасть в результирующий массив.  */

let a5 = [3, 14, 15, 92, "6"];
function t5(){
  let newA5 = a5.filter((el) => {
    if(el % 2 == 0 && typeof el == 'number'){
      a5_res.push(el);
      return a5_res;
    }
  })
  console.log(a5_res);
}
document.querySelector('.b-5').onclick = t5;
// Task 6 ============================================
/*  Дан массив a6 = [3, 14, 15, 92, "6", "5", "hello", 32]. C помощью filter переберите массив a6 и создайте массив a6_res, который содержит только числа из a6, которые больше 14. Возвратите a6_res. Действия должны запускаться при вызове функции t6. */

let a6 = [3, 14, 15, 92, "6", "5", "hello", 32];
function t6(){
  let newA6 = a6.filter((el) =>{
    if(el > 14 && typeof el == 'number'){
      a6_res.push(el);
      return a6_res;
    }
  })
  console.log(a6_res);
}
document.querySelector('.b-6').onclick = t6;
// Task 7 ============================================
/*  Дан массив a7 = ['Alto`s Adventure', 'Angry Birds 2', 'Anno 2205', 'Assassin`s Creed Chronicles']. C помощью map переберите массив a7 и создайте  a7_res, который содержит элементы массива a7 приведенные к нижнему регистру. Действия должны запускаться при вызове функции t7. Функция должна возвращать a7_res. */

let a7 = [
  "Alto`s Adventure",
  "Angry Birds 2",
  "Anno 2205",
  "Assassin`s Creed Chronicles",
];
function t7(){
  let a7_res = a7.map((el) => el.toLowerCase());
  console.log(a7_res);
}
document.querySelector('.b-7').onclick = t7;
// Task 8 ============================================
/* Дан массив a8 = [3, 14, 15, 92, 7, 32, 59]. C помощью цикла или метода - решить самостоятельно, переберите массив a8 и добавьте в a8_res индексы четных элементов. Т.е. для данного примера по результату работы функции в a8_res должны быть [1, 3, 5]. Функция должна возвращать a8_res. */

let a8 = [3, 14, 15, 92, 7, 32, 59];
function t8(){
  a8.forEach((elem, idx) => {
    if(elem % 2 == 0){
      a8_res.push(idx)
      return a8_res;
    }
  })
  console.log(a8_res);
}
document.querySelector('.b-8').onclick = t8;
// Task 9 ============================================
/*  Дан массив a9 = ['Quantum Break', 'Gears of War 4', 'Mass Effect: Andromeda', 'Far Cry Primal']. С помощью forEach, переберите массив a9 и преобразуйте все записи в массиве в нижний регистр. Действия должны запускаться при вызове функции t9. Функция должна возвращать a9. */

let a9 = [
  "Quantum Break",
  "Gears of War 4",
  "Mass Effect: Andromeda",
  "Far Cry Primal",
];
function t9(){
  a9.forEach((el, idx) => {
    a9[idx] = el.toLowerCase();
    return a9;
  })
  console.log(a9);
}
document.querySelector('.b-9').onclick = t9;

// Task 10 ============================================
/*  Дан массив a10 = [2, 13, 14, -7, 9, 5, 0, -2, 14]. С помощью forEach, переберите массив a9 и элементы, которые меньше нуля замените на 0.  Возвратите a10. Действия должны запускаться при вызове функции t10.  Для данного примера результат должен выглядеть так: [2, 13, 14, 0, 9, 5, 0, 0, 14]*/

let a10 = [2, 13, 14, -7, 9, 5, 0, -2, 14];
function t10(){
  a10.forEach((el, idx) => {
    if(el < 0) a10[idx] = 0;
      return a10;
    
  })
  console.log(a10);
}
document.querySelector('.b-10').onclick = t10;
// Task 11 ============================================
/*  Дан массив a11 = [2, 13, 14, -7, 9, 5, 0, -2, 14]. С помощью filter, переберите массив a11 и создайте новый массив a11_res куда добавьте только те элементы массива ИНДЕКС которых - четный. Возвратите a11_res.*/

let a11 = [2, 13, 14, -7, 9, 5, 0, -2, 14];
function t11(){
  let newA11 = a11.filter((el, idx) =>{
    if(idx % 2 == 0){
      a11_res.push(el);
      return a11_res;
    }
  })
  console.log(a11_res);
}
document.querySelector('.b-11').onclick = t11;
// Task 12 ============================================
/*  Данa переменная a12 = [2, 13, 14, -7, 9, 5, 0, -2, 14]. С помощью метода Array.isArray определите является ли переменная a12 массивом. Если да - то функция возврaщает true, если нет false.*/

let a12 = [2, 13, 14, -7, 9, 5, 0, -2, 14];
//let a12 = 8;
function t12(){
    console.log(Array.isArray(a12));
}
document.querySelector('.b-12').onclick = t12;
// a12 = 8; // на этой переменной можно проверить работает или нет ваша функция.

// Task 13 ============================================
/*  Дан массив a13 = [2, 13, 14, -7, 9, 5, 0, -2, 14]. С помощью метода includes функция t13 должна определить, есть ли значение из переменной a13_num в массиве. Если да - то функция возврaщает true, если нет false.*/

let a13 = [2, 13, 14, -7, 9, 5, 0, -2, 14];
let a13_num = 9;
function t13(){
  console.log(a13.includes(a13_num));
}
document.querySelector('.b-13').onclick = t13;
// Task 14 ============================================
/*  Дан массив a14 = ['c', 'C', 'd', 'e', 'E']. С помощью метода includes функция t14 должна определить, есть ли значение из переменной a14_sym в массиве. Если да - то функция возврaщает true, если нет false. Обратите внимание, функция должна искать независимо от регистра. Т.е. если в a14_sym будет строка 'd' то возвратить true, однако и на строку 'D' тоже возвратить true. */

//тут у меня остался вопрос с регистром!!!!!!!!!!!!!!!!!

let a14 = ["c", "C", "d", "e", "E"];
let a14_sym = "e";
function t14(){
  
  console.log(a14.includes(a14_sym));
}
document.querySelector('.b-14').onclick = t14;
// Task 15 ============================================
/*  Дан массив a15. С помощью метода filter функция t15 должна создать на его основе массив a15_res содержащий записи только тех пользователей, номер паспорта (pnum) которых не пустая строка и длина номера - 6 символов. Функция должна возвращать a15_res.*/
/*
в данном примере нужно получить результат 
 [
    {
        "name" : "ivanov",
        "pnum" : 'tr7862'
    },
    {
        "name": "sedanov",
        "pnum": 'im7961'
    },
]
*/

let a15 = [
  {
    name: "ivanov",
    pnum: "tr7862",
  },
  {
    name: "petrov",
    pnum: "",
  },
  {
    name: "sedanov",
    pnum: "im7961",
  },
  {
    name: "dou",
    pnum: "tr786259",
  },
];
function t15(){
  let a15Res = a15.filter((elem, idx) => {
    if(elem['pnum'] !== '' && elem['pnum'].length === 6){
      a15_res.push(elem);
      return a15_res;
    }
  })
  console.log(a15_res);
}
document.querySelector('.b-15').onclick = t15;